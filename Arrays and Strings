const isUnique = string => {
  const sorted = string.split("").sort();
  for(let i = 1; i < sorted.length; i++) {
    if(sorted[i] === sorted[i - 1]) return false
  }

  return true
}

/*
sort string
iterate over string starting at 1
if the current letter matches the letter in the index before it return false
return true at the end

time complexity is O(n) because we iterate over the string once to check for matches
javascript sort is O(nlogn)
*/

const isPermutation = (string1, string2) => {
  if(string1.length !== string2.length) return false
  const sort1 = string1.split("").sort().join("");
  const sort2 = string2.split("").sort().join("");
  return sort1 === sort2;
}

/*
sort strings
return true if the sorted strings match
otherwise return false

time complexity here would be O(n) because i would iterate through the string to split as well as join each character and that is dominant over the sort which would take O(n log n)
*/

const urlify = (url, trueLength) => {
  let editedUrl = url.slice(0, trueLength);
  return editedUrl.replace(/ /g, "%20")
}

/*
slice string up to true length
replace empty space with %20 using javascript replace and regex
return new string 

time complexity is O(n) because we need to iterate over the string during the replace method callfa
*/

const palindromePerm = string => {
  const hasSeen = {};
  let uniqueLetterCount = 0;
  for(let i = 0; i < string.length; i++) {
    if(string[i] === " ") {
      continue;
    }
    if (hasSeen[string[i]]) {
      delete hasSeen[string[i]];
    } else {
      hasSeen[string[i]] = true;
    }
    uniqueLetterCount++
  }

  if (uniqueLetterCount % 2 === 0) {
    return Object.keys(hasSeen).length === 0;
  } else {
    return Object.keys(hasSeen).length === 1;
  }
}

/*
create letter counter
if letter does not exist, put into counter
if the letter does exist, delete the key
skip iteration for spaces
keep track of unique letter count excluding spaces
if unique letter count is even, there should be no keys in the letter counter
if unique letter count is odd, there should be only one key in the letter counter

time complexity is O(N) because we iterate over each letter
*/

const oneAway = (string1, string2) => {
  let longString;
  let shortString;
  if(string1.length > string2.length) {
    longString = string1;
    shortString = string2;
  } else {
    longString = string2;
    shortString = string1;
  }

  if (longString.length - shortString.length > 1) {
    return false
  }

  let letterCount = {};
  for(let i = 0; i < longString.length; i++) {
    if (letterCount[longString[i]]) {
      letterCount[longString[i]] += 1;
    } else {
      letterCount[longString[i]] = 1
    }
  }

  for (let i = 0; i < shortString.length; i++) {
    if(letterCount[shortString[i]] > 1) {
      letterCount[shortString[i]] -= 1;
    } else {
      delete letterCount[shortString[i]]
    }
  }

  if (Object.keys(letterCount).length === 1 || Object.keys(letterCount).length === 0) {
    return true
  }
  return false
}

// oneAway("pale", "ple")
// oneAway("pales", "pale")
// oneAway("pale", "bake")
/*
if the difference in string lengths is more than one, return false
create a hash to count the letters
using the other string, if the hashmap has the key and the value is one, delete it, otherwise subtract one
in the end, return true if there is one key or no key
else false

time complexity is O(n) because i iterate over each letter in both strings separately
*/

const stringCompression = string => {
  let result = [];
  let counter = 0;
  for(let i = 0; i < string.length; i++) {
    counter++
    let runner = i + 1;
    if(string[i] === string[runner]) {
      continue;
    } else {
      result.push(string[i]);
      result.push(counter);
      counter = 0;
    }
  }
  return result.join("")
}

// stringCompression("aabcccccaaa")
// stringCompression("ac")
// stringCompression("aba")
/*
have result array
iterate over each character
have a pointer in front of current character
if pointer and current match, increase counter by one
else push letter and current count, after reset counter
join result array

time complexity is O(n) for one for loop and one join
*/
